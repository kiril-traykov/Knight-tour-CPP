#include <iostream>
#include "Functions.h"

using namespace std;

int main()
{
	int n, m, x, y;
	cout << "the dimensions of m and n must be bigger than 4,if both m and n are odd, the solution will not work with every starting point." << endl;

	cout << "Please enter m: ";
	cin >> m;

	while (m < 5) {
		cout << "m must be bigger than 4" << endl;
		cout << "Please enter m: ";
		cin >> m;
	}


	cout << "Please enter n: ";
	cin >> n;
	while (n < 5) {
		cout << "n must be bigger than 4" << endl;
		cout << "Please enter n: ";
		cin >> n;
	}
	
	if (m % 2 != 0 && n % 2 != 0) {
		x = 0;
		y = 0;
	}
	else {
		cout << "Please enter starting coordinates for the knight,x = ";
		cin >> x;
		while (x < 0 || x > m - 1) {
			cout << "invalid input, please try again." << endl;
			cout << " x = ";
			cin >> x;
		}
		cout << " y = ";
		cin >> y;
		while (y < 0 || y > n - 1) {
			cout << "invalid input, please try again." << endl;
			cout << " y = ";
			cin >> y;
		}
	}
	
	
		int** possiblemoves = nullptr;
	possiblemoves = new int*[8];
	for (int i = 0; i < 8; i++) {
		possiblemoves[i] = new int[2];
	}
	int bestmove = 0;
	int loop = 1;
	int counter = 0;
	int**board = nullptr;
	board = new int*[m];
	for (int i = 0; i < m; i++) {
		board[i] = new int[n];
	}

	createboard(board, m, n);
	getknight(board, m, n, x, y);
	displyboard(board, m, n);

	while (loop != m * n) {
		move(board, m, n, x, y, possiblemoves, counter);

		/*cout << counter << endl;
		for (int i = 0; i < counter; i++) {
			cout << possiblemoves[i][0] << '\t' << possiblemoves[i][1] << endl;
		}*/

		bestmove = determinatebestmove(board, m, n, possiblemoves, counter);
		moveknight(board, m, n, x, y, possiblemoves, bestmove, loop);

	}
  for (size_t i = 0; i < 8; i++)
	{
		delete[] possiblemoves[i];

	}
	delete[]possiblemoves;
}
